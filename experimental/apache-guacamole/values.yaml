namespace: guacamole

# guacd Configurations
guacdName: &guacdname guacd
guacdReplicas: 1
guacdPort: &guacdport 4822
guacdImage: guacamole/guacd
pullPolicy: Always
guacdEnv:
  GUACD_LOG_LEVEL: "debug"


# MariaDB Configurations
dbName: &dbname guacamole-db
dbReplicas: 1
dbVipPort: 3306
dbSourcePort: &dbport 3306
dbImage: mariadb:lts
dbEnv:
  MARIADB_RANDOM_ROOT_PASSWORD: 1
  MARIADB_DATABASE: &databaseName guacamole_db



# guacamole Configurations
guacamoleName: guacamole-webapp
guacamoleReplicas: 1
guacamoleVipPort: 80
guacamoleSourcePort: 8080
guacamoleImage:  us-central1-docker.pkg.dev/living-on-the-edge/gdce-repo/guacamole:20250408
guacamoleEnv:
  GUACD_HOSTNAME: *guacdname
  GUACD_PORT: *guacdport
  # The GUACAMOLE_HOME envvar is used by Guacamole as a base directory which contains
  # various customizations. Upon startup Guacamole will merge the contents of this directory
  # with /opt/guacamole to form a completely configured installation. We're using this
  # to add custom extensions to Guacamole.
  GUACAMOLE_HOME: /tmp/custom-extensions
  MYSQL_HOSTNAME: *dbname
  MYSQL_PORT: *dbport
  MYSQL_DATABASE: *databaseName
  MYSQL_USER: guacamole_user
  MYSQL_PASSWORD: guacamole
  MYSQL_AUTO_CREATE_ACCOUNTS: true

imagePullSecrets: artifact-registry

nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
